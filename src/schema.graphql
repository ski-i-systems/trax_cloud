type Query {
  Greeting: String
  Users: [User]!
  Organisations: [Organisation]!
  Files: [File]!
}

type User {
  id: ID
  name: String!
  email: String!
  password: String!
  createdAt: String
  updatedAt: String
}

type Organisation {
  id: ID
  name: String
  createdAt: String
  updatedAt: String
}

type File {
  id: ID
  creator: String!
  organisation: String!
  documentType: String
  fields: [FieldTag]
  notes: [Note]
  createdAt: String
  updatedAt: String
}

type FieldTag {
  key: String
  value: String
}

type Note {
  id: ID
  noteCreator: String
  noteText: String
  createdAt: String
  updateAt: String
}

type Mutation {
  createUser(data: CreateUserInput): AuthPayload!
  loginUser(data: LoginUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
  createOrganisation(data: CreateOrganisationInput!): OrgPayload!
  createFile(data: CreateFileInput!, fields: [CreateFileTags]): FilePayload!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

input CreateOrganisationInput {
  name: String!
  adminName: String!
  adminEmail: String!
  adminPassword: String!
}

input CreateFileInput {
  organisation: String!
  documentType: String
}
input CreateFileTags {
  key: String
  value: String
}

type AuthPayload {
  token: String!
  user: User!
}
type OrgPayload {
  organisation: Organisation!
  adminUser: User!
}

type FilePayload {
  file: File!
}
