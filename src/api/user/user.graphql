type Query {
  User(data: GetUserInput): User!
  Users: [User]!
  #usersByOrg(id: String!): [User]!
}

type User {
  id: ID
  firstName: String!
  lastName: String
  title: String
  email: String!
  password: String!
  createdAt: String
  updatedAt: String
  organisationID: ID!
  active: Boolean
}

type Mutation {
  createUser(data: CreateUserInput): AuthPayload!
  deleteUser(data: DeleteUserInput!): User!
  loginUser(data: LoginUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  title: String
  email: String!
  password: String!
}

input DeleteUserInput {
  id: ID!
}

input GetUserInput {
  id: String
  email: String
  name: String
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  password: String
  active: Boolean
}

type AuthPayload {
  token: String!
  user: User!
}
