extend type Query {
  FilesOld: [File]!
  Files(data: QueryFileInput!): [File]!
  File(id: String!): File!
}

extend type Mutation {
  createFile(data: CreateFileInput!, fields: [CreateFileTags]): FilePayload!
  updateFile(
    _id: ID!
    data: CreateFileInput
    fields: [CreateFileTags]
  ): FilePayload!
  deleteFile(id: String!): DeleteResult!
}

type DeleteResult {
  deleteCount: Int!
  success: String!
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type File {
  id: ID
  creator: String!
  organisationID: ID!
  documentType: String
  fields: [FieldTag]
  filePath: S3Object
  createdAt: String
  updatedAt: String
}

type FieldTag {
  key: String
  value: String
  dataType: String
}

"""
****NB searchType: in or notIn, VALUE MUST BE PIPE SEPARATED STRING****
"""
input FieldTagSearch {
  key: String!
  value: String!
  searchType: searchTypeEnum = equals
}

input CreateFileInput {
  documentType: String
  filePath: String
}

input QueryFileInput {
  id: String
  documentType: String
  creatorId: String
  fields: [FieldTagSearch]
}

"""
FOR VALUES in AND notIn FieldTagSearch.value MUST BE PIPE SEPARATED
"""
enum searchTypeEnum {
  equals
  notEquals
  lessThan
  greaterThan
  lessThanOrEqual
  greaterThanOrEqual
  in
  notIn
}

enum dataTypeEnum {
  string
  currency
  datetime
  integer
  boolean
}

input CreateFileTags {
  key: String
  value: String
  dataType: dataTypeEnum
}

type FilePayload {
  file: File!
}
